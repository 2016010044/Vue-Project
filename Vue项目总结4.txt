1.去结算
说完了之前的，接着来捋一下去结算的东西。
在Cart.vue中：
<div class="tabBarRight">
                    <button class="pay" @click="toPay">去结算({{goodsCount}})</button>
                </div>
实现如下：
toPay(){
                if(this.totalPrice > 0){
                    this.$router.push('/confirmOrder');
                }else {
                    Toast({
                        message: '请先选择商品后再结算~',
                        duration: 1000
                    })
                }
            }
配置路由页面后跳转到该页面，

订单：
该页面上面用到了NavBar组件：
 <van-nav-bar
                title="填写订单"
                left-arrow
                :fixed=true
                :border=true
                @click-left="onClickLeft"
        ></van-nav-bar>
实现如下：
 onClickLeft() {
                this.$router.back();
            },
接着用到ContactCard, 组件，来填写地址：
<van-contact-card
                :type="address_type"
                add-text="选择收货地址"
                :name="address_name"
                :tel="address_phone"
                @click="chooseAddress"
                style="margin-top: 3rem"
        ></van-contact-card>
chooseAddress实现如下：
chooseAddress() {
                this.$router.push('/confirmOrder/myAddress');
            },
接着跳转到我的地址：
<div id="myAddress">
        <!--导航栏-->
        <van-nav-bar
                title="我的地址"
                left-arrow
                :fixed=true
                :border=true
                @click-left="onClickLeft"
        ></van-nav-bar>
        <van-address-list
                v-model="chosenAddressId"
                :list="list"
                @add="onAdd"
                @edit="onEdit"
                @select="onBackAddress"
                style="margin-top: 3rem"
        ></van-address-list>

        <!--出口出口出口-->
        <transition name="router-slider" mode="out-in">
            <router-view></router-view>
        </transition>
    </div>
chosenAddressId：就是默认选中的，
data() {
            return {
                chosenAddressId: '1',
                list: []
            }
        },
 onClickLeft实现：
 onClickLeft(){
                this.$router.go(-1);
            },

接着就是地址列表（ContactList组件）：有编辑（ContactEdit）、添加、选中。
1）.添加：点击按钮跳转到添加页面：
<div id="addAddress">
        <!--导航栏-->
        <van-nav-bar
                title="添加地址"
                left-arrow
                :fixed=true
                :border=true
                @click-left="onClickLeft"
        ></van-nav-bar>
        <van-address-edit
                :area-list="areaList"
                show-postal
                show-set-default
                :search-result="searchResult"
                @save="onSave"
                @change-detail="onChangeDetail"
                style="margin-top: 3rem"
        >
        </van-address-edit>
    </div>
添加的地址是当前用户的，所以要拿到userInfo从state中，点击保存触发onSave方法：
export default {
        name: "AddAddress",
        data() {
            return {
                areaList: areaList,//从外部引入的地址列表。
                searchResult: []
            }
        },
        computed: {
            ...mapState(['userInfo'])
        },
        methods: {
            onClickLeft() {
                this.$router.go(-1);
            },
            // 保存
            async onSave(content) {
                // console.log(content);
                if(this.userInfo.token){
                    let result = await addUserAddress(this.userInfo.token, content.name, content.tel, content.province+content.city+content.county, content.addressDetail, content.postalCode, content.isDefault, content.province, content.city, content.county, content.areaCode);
                    console.log(result);
                    // 判断
                    if(result.success_code === 200){ // 成功
                        Toast({
                            message: '添加地址成功！',
                            duration: 400
                        });
                        // 回去
                        this.$router.back();
                        // 发起通知
                        PubSub.publish('backToMyAddress');
                    }else {
                        Toast({
                           message: '添加地址失败！',
                           duration: 400
                        });
                    }

                }
            },
            onChangeDetail(val) {
                if (val) {
                    this.searchResult = [{
                        name: '黄龙万科中心',
                        address: '杭州市西湖区'
                    }];
                } else {
                    this.searchResult = [];
                }
            }
        }
    }
这里的onChangeDetail是官方的，最然没什么用，但还是放着吧。
添加成功，返回上一个界面，接着就是发布消息（告诉上一个界面我添加成功了），在上一个界面（MyAddress.vue）中接收。
mounted(){
            this.initUserAddress();
            // 订阅添加地址成功
            PubSub.subscribe('backToMyAddress', (msg)=>{
                if(msg === 'backToMyAddress'){
                    this.initUserAddress();
                }
            })
        },
父组件先初始化地址，
async initUserAddress(){
                if(this.userInfo.token){ // 处于登录状态
                    let result = await getUserAddress(this.userInfo.token);
                    // console.log(result);
                    if(result.success_code === 200){
                        let addressArr = result.data;
                        this.list = [];
                        addressArr.forEach((address, index)=>{
                            let addressObj = {
                                id: String(index + 1),
                                name: address.address_name,
                                tel: address.address_phone,
                                address: address.address_area + address.address_area_detail,
                                address_id: address._id,
                                user_id: address.user_id
                            };
                            // 追加到数组
                            this.list.push(addressObj);
                        });
                    }else {
                        Toast({
                            message: '获取地址失败！',
                            duration: 400
                        })
                    }
                }else {
                    Toast({
                        message: '登录已过期，请退出登录！',
                        duration: 400
                    })
                }
            },
这两次初始化还是有很大不同的，然后每个地址就有address_id了，
2).接着实现编辑：
 onEdit(item, index) {
                this.$router.push({
                    path: '/confirmOrder/myAddress/editAddress?address_id='+item.address_id
                })
            },
编辑实现如下：
<template>
    <div id="editAddress">
        <!--导航栏-->
        <van-nav-bar
                title="修改地址"
                left-arrow
                :fixed=true
                :border=true
                @click-left="onClickLeft"
        ></van-nav-bar>
        <van-address-edit
                :area-list="areaList"
                :address-info="addressInfo"
                show-postal
                show-delete
                show-set-default
                @save="onSave"
                @delete="onDelete"
                style="margin-top: 3rem"
        >
        </van-address-edit>
    </div>
</template>
<script>
    import areaList from './../../../../config/area'
    export default {
        name: "AddAddress",
        data(){
            return {
                areaList:areaList, // 省市区
                addressInfo: {} // 地址信息
            }
        },
        computed:{
            ...mapState(["userInfo"])
        },
        mounted(){
 /*
这里的$route是一个跳转的路由对象，每一个路由都会有一个$route对象，是一个局部的对象,它指的就是当前路由editAddress（可以在路由中查看），然后可以取到this.$route.query.address_id，因为这个address_id是上一个组件传过来的，所以能拿到。
**/
            if(this.$route.query.address_id){
                if(this.userInfo.token){
                   this.getCurrentAddress(this.userInfo.token, this.$route.query.address_id);//获取到要修改的信息，方法实现如下

                }
            }
        },
        methods: {
            onClickLeft(){
                this.$router.go(-1);
            },
            // 修改收货地址
            async onSave(content) {
                if(this.userInfo.token){
                    // 1. 发起修改请求
                    let result = await changeUserAddress(this.addressInfo.id, this.userInfo.token,  content.name, content.tel, content.province+content.city+content.county, content.addressDetail, content.postalCode, content.isDefault, content.province, content.city, content.county, content.areaCode);
                    console.log(result);
                    //  2. 判断是否修改成功
                    if(result.success_code === 200){
                        Toast({
                            message: '修改地址成功！',
                            duration: 400
                        });
                        // 2.1 返回到上一级界面
                        this.$router.back();
                        // 2.2 发布修改成功
                        PubSub.publish('backToMyAddress');
                    }else {
                        Toast({
                            message: '修改地址失败！',
                            duration: 400
                        });
                    }
                }
            },
            // 删除收货地址
            async onDelete() {
                 let result = await delUserAddress(this.addressInfo.id);
                 console.log(result);
                 if(result.success_code === 200){
                     Toast({
                         message: '删除地址成功！',
                         duration: 400
                     });
                     // 2.1 返回到上一级界面
                     this.$router.back();
                     // 2.2 发布删除成功
                     PubSub.publish('backToMyAddress');
                 }else {
                     Toast({
                         message: '删除地址失败！',
                         duration: 400
                     });
                 }
            },
            // 获取要修改的地址信息
            async getCurrentAddress(user_id, address_id){
                let result = await getCurrentUserAddress(user_id, address_id);
                // console.log(result);
                if(result.success_code === 200){
                     this.addressInfo = {
                         id: result.data._id,
                         name: result.data.address_name,
                         tel: result.data.address_phone,
                         province: result.data.province,
                         city: result.data.city,
                         county: result.data.county,
                         addressDetail: result.data.address_area_detail,
                         areaCode: result.data.areaCode,
                         postalCode: result.data.address_post_code,
                         isDefault: result.data.address_tag
                     }
                }
                // console.log(this.addressInfo);
            }
        }
    }
</script>
上面的删除和修改保存后都要发布消息告诉父组件。父组件订阅消息后，最终销毁消息：
 beforeDestroy() {
            PubSub.unsubscribe('backToMyAddress');
        }

3）.返回选中的地址：
            onBackAddress(item, index){
                // console.log(item, index);
                if(item){
                    // 发布地址数据
                    PubSub.publish('userAddress', item);
                    // 返回上一级界面
                    this.$router.back();
                }
            }
在Order.vue中：
 // 接收收货地址
 data() {
            return {
                // 1. 地址
                address_type: 'add', // 地址卡片类型
                address_name: null, // 收货人
                address_phone: null, // 收货人电话
                address_id: null, // 收货人地址ID

                // 2. 日期
                dateShow: false,
                minDate: new Date(),
                maxDate: new Date(2021, 10, 1),
                currentDate: new Date(),
                // 3. 送达时间
                arriveDate: '请选择送达时间',
                // 4. 备注
                notice: null,

                isPay: false, // 是否显示二维码蒙版
                qrcode: null, // 生成二维码的URL地址
            }
        },
mounted() {
            // 接收收货地址
            PubSub.subscribe('userAddress', (msg, address) => {
                if (msg === 'userAddress') {
                    // console.log(address);
                    // 修改卡片的类型
                    this.address_type = 'edit';
                    this.address_name = address.name;
                    this.address_phone = address.tel;
                    this.address_id = address.address_id;
                }
            })
        },
地址弄完了，接着就是处理Order.vue中的东西了，
送达时间：
<van-cell-group style="margin-top: 0.6rem">
            <van-cell title="送达时间" :value="arriveDate" @click="showDatePopup" is-link></van-cell>
            <router-link :to="{path: '/confirmOrder/orderDetail'}">
                <van-cell :value="`共${goodsCount}件`" is-link :center=true>
                    <template slot="title">
                        <img v-for="(goods, index) in threeShopCart" :src="goods.small_image" alt="" style="width: 3rem;">
                    </template>
                </van-cell>
            </router-link>
        </van-cell-group>
showDatePopup方法实现：
// 4.展示日期组件
            showDatePopup(){
                this.dateShow = true;
            },
这里需要使用到弹出日期组件：
 <van-popup v-model="dateShow" round position="bottom">
            <van-datetime-picker
                v-model="currentDate"
                type="datetime"
                :min-date="minDate"
                :max-date="maxDate"
                @cancel="onDateCancel"
                @confirm="onDateConfirm"
            >
            </van-datetime-picker>
        </van-popup>
默认dateShow为false,当点击按钮时dateShow为true，日期组件展示了出来。 
// 5. 取消日期组件
            onDateCancel(){
                this.dateShow = false;
            },
            // 6. 确认日期组件
            onDateConfirm(value){
                this.dateShow = false;
                this.arriveDate = Moment(value).format('YYYY-MM-DD hh:mm');
                // console.log(value);
            }
在computed中实现goodsCount，threeShopCart
goodsCount(){
                let selectedGoodsCount = 0;
                Object.values(this.shopCart).forEach((goods, index)=>{
                    if(goods.checked){
                        selectedGoodsCount += 1;
                    }
                });
                return selectedGoodsCount;
            },
threeShopCart(){
                let shopCart = [];
                Object.values(this.shopCart).forEach((goods, index)=>{
                    if(goods.checked){
                        shopCart.push(goods);
                    }
                });
                return shopCart.slice(0, 3);
            },


点击图片到商品清单：
<template>
    <div id="orderDetail">
        <!--导航栏-->
        <van-nav-bar
            title="商品清单"
            left-arrow
            :fixed=true
            :border=true
            @click-left="$router.go(-1)"
        ></van-nav-bar>
        <!--内容-->
        <van-cell-group style="margin-top: 3rem">
            <van-cell title="商品" :value="`共${checkedShopCount}件`"></van-cell>
            <van-card
                v-for="(goods, index) in checkedShopCart"
                :key="goods.id"
                :num="goods.num"
                :price="goods.price"
                :title="goods.name"
                :thumb="goods.small_image"
            >
            </van-card>
        </van-cell-group>
    </div>
</template>

<script>
    import {mapState} from 'vuex'
    export default {
        name: "OrderDetail",
        computed:{
            ...mapState(['shopCart']),
            // 1. 获取选中的商品
            checkedShopCart(){
                let shopCart = [];
                Object.values(this.shopCart).forEach((goods, index)=>{
                    if(goods.checked){
                        shopCart.push(goods);
                    }
                });
                return shopCart;
            },
            // 2. 选中商品的总件数
            checkedShopCount(){
               return this.checkedShopCart.length;
            }
        }
    }
</script>
在Order.vue中接着就是支付方式等：
<van-cell-group style="margin-top: 0.6rem">
            <van-cell title="支付方式" value="微信"></van-cell>
        </van-cell-group>

        <van-cell-group style="margin-top: 0.6rem">
            <van-cell title="备注">
                <input type="text" style="text-align: right" placeholder="选填，备注您的特殊需求！" v-model="notice">
            </van-cell>
        </van-cell-group>

        <van-cell-group style="margin-top: 0.6rem">
            <van-cell title="商品金额" :value="`¥${totalPrice}`"></van-cell>
            <van-cell title="配送费" :value="`¥${disPrice}`"></van-cell>
        </van-cell-group>
在computed中实现：totalPrice
totalPrice(){
                let totalPrice = 0;
                Object.values(this.shopCart).forEach((goods, index)=>{
                    if(goods.checked){
                        totalPrice += goods.price * goods.num;
                    }
                });
                return totalPrice.toFixed(2);
            },
disPrice(){
                // 商品总价 > 40 免配送费  <40 6元
                if(this.totalPrice > 40){
                    return 0;
                }else {
                    return 6;
                }
            }
最后就是底部的提交订单了。
<van-submit-bar
                :price="totalPrice*100 + disPrice*100"
                button-text="提交订单"
                label="实付"
                @submit="onSubmit">
        </van-submit-bar>
<!--支付二维码-->
        <van-popup  v-model="isPay" round position="center">
            <qriously :value="qrcode" :size="200" />
        </van-popup>
async onSubmit() {
               // 3.1 数据验证
               if(!this.address_id){
                  Toast({
                      message: '请选择收货地址',
                      duration: 500
                  });
                  return;
               }

               if(this.arriveDate === '请选择送达时间'){
                   Toast({
                       message: '请选择送达时间',
                       duration: 500
                   });
                   return;
               }

                if(!this.notice){
                    Toast({
                        message: '请添加注意事项',
                        duration: 500
                    });
                    return;
                }

                // 3.2 处理订单相关
                if(this.userInfo.token){
                    // 3.2.1 查询购物车订单
                    let goodsResult = await getAllSelectedGoods(this.userInfo.token);
                    // console.log(goodsResult);
                    // 3.2.2 创建订单
                    if(goodsResult.success_code === 200){
                        let orderResult = await postOrder(this.userInfo.token, this.address_id, this.arrive_time, goodsResult.data, this.notice, this.totalPrice, this.disPrice);
                        console.log(orderResult);
                        // 3.3.3 删除购物车中已经生成订单的商品
                        if(orderResult.success_code === 200){
                            let delResult = await delAllSelectedGoods(this.userInfo.token);
                            console.log(delResult);
                            // 3.3.4 发起微信支付
                            if(delResult.success_code === 200){
                                 // 测试，测试，测试
                                 let urlResult = await getWXCode(orderResult.data.order_id, 1);
                                 console.log(urlResult);
                                 if(urlResult.code_url){ // 有值
                                     this.isPay = true;
                                     this.qrcode = urlResult.code_url;
                                     // 3.3.5 验证用户是否扫码
                                     let payResult = await queryPayStatus(orderResult.data.order_id);
                                     console.log(payResult);
                                     if(payResult.success){
                                         Toast({
                                             message: payResult.message,
                                             duration: 1000
                                         });
                                         this.isPay = false;
                                         // 3.3.6 通知自己服务器订单支付成功
                                         let statusResult = await orderPaySuccess(this.userInfo.token, orderResult.data.order_id);
                                         console.log(statusResult);
                                         if(statusResult.success_code === 200){
                                              // 3.3.7 跳转到我的
                                             this.$router.replace('/dashboard/mine');
                                             window.sessionStorage.setItem('tabBarActiveIndex', '3');
                                         }
                                     }
                                 }
                            }else {
                                Toast({
                                    message: '订单处理出现问题！',
                                    duration: 500
                                });
                            }
                        }else {
                            Toast({
                                message: '购物车同步出现问题！',
                                duration: 500
                            });
                        }
                    }else {
                        Toast({
                            message: '获取订单商品失败！',
                            duration: 500
                        });
                    }
                }
            },
补充：转场动画：
<transition name="router-slider" mode="out-in">
            <router-view></router-view>
        </transition>

style:
/*转场动画*/
    .router-slider-enter-active, .router-slider-leave-active {
        transition: all 0.3s;
    }

    .router-slider-enter, .router-slider-leave-active {
        transform: translate3d(2rem, 0, 0);
        opacity: 0;
    }
一般放在那个页面，这个页面跳转的时候会有转场动画

